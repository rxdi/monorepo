{"version":3,"sources":["helpers/make-dir.ts","constants.ts","helpers/check-exist.ts","helpers/create-tsconfig.ts","helpers/create-workspace.ts","tasks/create.ts","helpers/create-module.ts","helpers/create-lib.ts","tasks/create-lib.ts","helpers/create-shared.ts","helpers/read-dir.ts","helpers/args-extrators.ts","helpers/transpile-typescript.ts","helpers/compile-workspace.ts","helpers/copy-modules.ts","tasks/compile.ts","helpers/run-process.ts","helpers/read-config.ts","tasks/run.ts","helpers/npm-install.ts","helpers/install-apps.ts","tasks/install.ts","tasks/index.ts","main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"../src","sourcesContent":["import { promisify } from 'util';\nimport { mkdir } from 'fs';\n\nexport async function makeDir(path: string) {\n  return promisify(mkdir)(path);\n}\n","export const MAIN_FOLDER = 'src';\n\nexport const CONFIG = {\n  shared: '@shared',\n  lib: '@lib',\n  apps: '@apps'\n};\n","import { promisify } from 'util';\nimport { exists } from 'fs';\n\nexport async function checkExist(path: string) {\n  return promisify(exists)(path);\n}\n","import { promisify } from 'util';\nimport { writeFile } from 'fs';\nimport { join } from 'path';\n\nexport async function createTsConfig(json: Object, directory: string, name: string = 'tsconfig.json') {\n  await promisify(writeFile)(join(directory, name), JSON.stringify(json, null, 2), {\n    encoding: 'utf-8'\n  });\n}\n","import { makeDir } from './make-dir';\nimport { MAIN_FOLDER, CONFIG } from '../constants';\nimport { checkExist } from './check-exist';\nimport { join } from 'path';\nimport { createTsConfig } from './create-tsconfig';\n\nexport async function createWorkspace() {\n  try {\n    await makeDir(MAIN_FOLDER);\n  } catch (e) {}\n\n  await createTsConfig(\n    {\n      compilerOptions: {\n        module: 'commonjs',\n        target: 'es6',\n        declaration: true,\n        moduleResolution: 'node',\n        emitDecoratorMetadata: true,\n        experimentalDecorators: true,\n        removeComments: true,\n        allowSyntheticDefaultImports: true,\n        preserveConstEnums: true,\n        sourceMap: true,\n        strictNullChecks: false,\n        forceConsistentCasingInFileNames: true,\n        noFallthroughCasesInSwitch: true,\n        noImplicitAny: false,\n        noImplicitReturns: true,\n        noImplicitThis: false,\n        noUnusedLocals: true,\n        noUnusedParameters: false,\n        outDir: './node_modules',\n        lib: [\n          'es2017',\n          'es2016',\n          'es2015',\n          'es6',\n          'dom',\n          'esnext.asynciterable'\n        ],\n        typeRoots: ['node_modules/@types']\n      },\n      include: ['./src/**/*'],\n      exclude: ['node_modules/**/*', './src/**/*.spec.ts']\n    },\n    process.cwd()\n  );\n\n  await createTsConfig(\n    {\n      references: [{ path: './@lib/' }, { path: './@shared/' }]\n    },\n    join(process.cwd(), MAIN_FOLDER)\n  );\n  await createTsConfig(\n    {\n      compilerOptions: {\n        target: 'es2015',\n        module: 'commonjs',\n        declaration: true,\n        declarationMap: true,\n        sourceMap: true,\n        strict: true,\n        composite: true,\n        esModuleInterop: true\n      }\n    },\n    join(process.cwd(), MAIN_FOLDER),\n    'tsconfig.settings.json'\n  );\n  for (const value of Object.values(CONFIG)) {\n    const folder = join(process.cwd(), MAIN_FOLDER, value);\n    if (!(await checkExist(folder))) {\n      try {\n        await makeDir(folder);\n        await wait();\n        await createTsConfig(\n          {\n            references: []\n          },\n          folder\n        );\n      } catch (e) {}\n    }\n  }\n}\n\nfunction wait() {\n  return new Promise(resolve => setTimeout(() => resolve(), 100));\n}\n","import { createWorkspace } from '../helpers/create-workspace';\n\nexport async function Create() {\n  await createWorkspace();\n}\n","import { join } from 'path';\nimport { MAIN_FOLDER, CONFIG } from '../constants';\nimport { makeDir } from './make-dir';\nimport { promisify } from 'util';\nimport { writeFile } from 'fs';\nimport { createTsConfig } from './create-tsconfig';\n\nexport async function createModule(name: string, type: 'shared' | 'lib') {\n  const mainFolder = join(process.cwd(), MAIN_FOLDER, CONFIG[type]);\n  const sharedFolder = join(mainFolder, name);\n  try {\n    await makeDir(sharedFolder);\n  } catch (e) {}\n  await promisify(writeFile)(\n    join(sharedFolder, 'index.ts'),\n    `export function MyLibFunction() {\n    return {}\n  }`,\n    { encoding: 'utf-8' }\n  );\n  await createTsConfig(\n    {\n      extends: '../../tsconfig.settings.json',\n      compilerOptions: {\n        declaration: true,\n        outDir: `../../../node_modules/${CONFIG[type]}/${name}`\n      }\n    },\n    sharedFolder\n  );\n  const configPath = join(mainFolder, 'tsconfig.json');\n  const referenceTypescriptConfig: {\n    references: { path: string }[];\n  } = require(configPath);\n  if (!referenceTypescriptConfig.references) {\n    throw new Error(`Missing \"references\" inside ${configPath}`);\n  }\n  const hasTheSameModule = referenceTypescriptConfig.references.find(\n    r => r.path === `./${name}`\n  );\n  if (hasTheSameModule) {\n    throw new Error(`Module already present with name ${name}`);\n  }\n  referenceTypescriptConfig.references.push({path: `./${name}`})\n  await createTsConfig(referenceTypescriptConfig, mainFolder);\n}\n","import { createModule } from './create-module';\n\nexport async function createLib(name: string) {\n  await createModule(name, 'lib');\n}\n","import { createLib } from '../helpers/create-lib';\n\nexport async function CreateLib(name: string) {\n  await createLib(name);\n}\n","import { createModule } from './create-module';\n\nexport async function CreateShared(name: string) {\n  await createModule(name, 'shared');\n}\n","import { promisify } from 'util';\nimport { execFile } from 'child_process';\n\nexport async function readDir(path: string) {\n  return (await promisify(execFile)('find', [path])).stdout.split('\\n');\n}\n","export type Tasks = '--watch' | '-c' | '--multi-compile' | '--copy-modules';\nexport const includes = (i: Tasks) => process.argv.toString().includes(i);\nexport const nextOrDefault = (\n  i: Tasks,\n  fb: any = true,\n  type = (p: string) => p\n) => {\n  if (process.argv.toString().includes(i)) {\n    const isNextArgumentPresent = process.argv[process.argv.indexOf(i) + 1];\n    if (!isNextArgumentPresent) {\n      return fb;\n    }\n    if (isNextArgumentPresent.includes('--')) {\n      return fb;\n    }\n    return type(isNextArgumentPresent);\n  }\n  return fb;\n};\n","import { spawn, ChildProcessWithoutNullStreams } from 'child_process';\nimport { includes } from './args-extrators';\n\nexport const TranspileTypescript = (cwd: string) => {\n  return new Promise(resolve => {\n    const args = ['tsc'];\n    if (includes('--watch')) {\n      args.push('--watch');\n    }\n    const child = spawn('npx', args, { cwd });\n    child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n\n\n    function exitHandler(child: ChildProcessWithoutNullStreams) {\n      child.kill();\n    }\n\n    //do something when app is closing\n    process.on('exit', exitHandler.bind(null, child));\n\n    //catches ctrl+c event\n    process.on('SIGINT', () => process.exit());\n\n    // catches \"kill pid\" (for example: nodemon restart)\n    process.on('SIGUSR1', exitHandler.bind(null, child));\n    process.on('SIGUSR2', exitHandler.bind(null, child));\n\n    //catches uncaught exceptions\n    process.on('uncaughtException', exitHandler.bind(null, child));\n    child.on('close', (code: number) => resolve(code));\n  });\n};\n","import { join, normalize } from 'path';\nimport { readDir } from './read-dir';\nimport { MAIN_FOLDER, CONFIG } from '../constants';\nimport { TranspileTypescript } from './transpile-typescript';\nimport { includes } from './args-extrators';\n\nexport async function compileWorkspace() {\n  const file_list = [\n    ...(await readDir(join(process.cwd(), MAIN_FOLDER, CONFIG.shared))),\n    ...(await readDir(join(process.cwd(), MAIN_FOLDER, CONFIG.lib)))\n  ];\n  const tsFiles = file_list\n    .filter(f => f.includes('.ts'))\n    .map(f => f.replace(process.cwd(), ''));\n  if (includes('--multi-compile')) {\n    return await TranspileTypescript(process.cwd());\n  }\n  return await Promise.all(\n    tsFiles.map(async file => {\n      const dir = normalize(join(process.cwd(), file));\n      const cwd = dir.substring(0, dir.lastIndexOf('/'));\n      await TranspileTypescript(cwd);\n    })\n  );\n}\n","import { spawn } from 'child_process';\nimport { CONFIG } from '../constants';\nimport { join } from 'path';\n\nexport function copyModules(type: keyof typeof CONFIG, cwd: string) {\n  return new Promise(resolve => {\n    const child = spawn('cp', ['-r', join(process.cwd(), 'node_modules', CONFIG[type]), cwd], { cwd: process.cwd() });\n    child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n    child.on('close', (code: number) => resolve(code));\n  });\n}\n","import { compileWorkspace } from '../helpers/compile-workspace';\nimport { copyModules } from '../helpers/copy-modules';\nimport { promisify } from 'util';\nimport { readdir } from 'fs';\nimport { join } from 'path';\nimport { MAIN_FOLDER, CONFIG } from '../constants';\nimport { includes } from '../helpers/args-extrators';\n\nexport async function Compile() {\n  await compileWorkspace();\n  const apps = await promisify(readdir)(\n    join(process.cwd(), MAIN_FOLDER, CONFIG.apps)\n  );\n  if (includes('--copy-modules')) {\n    await Promise.all(\n      apps.map(async app => {\n        await copyModules(\n          'lib',\n          join(process.cwd(), MAIN_FOLDER, CONFIG.apps, app, 'node_modules')\n        );\n        await copyModules(\n          'shared',\n          join(process.cwd(), MAIN_FOLDER, CONFIG.apps, app, 'node_modules')\n        );\n      })\n    );\n  }\n}\n","import { spawn, ChildProcessWithoutNullStreams } from 'child_process';\n\nexport const RunProcess = (\n  command: string,\n  cwd: string = process.cwd(),\n  signal?: string\n) => {\n  return new Promise(resolve => {\n    console.log(`Starting process: \"${command}\" Directory: ${cwd}`);\n    const child = spawn('npx', command.split(' '), { cwd });\n    child.stdout.on('data', (message: number) => {\n      if (message.toString().includes(signal)) {\n        console.log(`Resolve signal triggered '${signal}'`);\n        resolve(message);\n      }\n    });\n    child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n    process.stdin.resume(); //so the program will not close instantly\n\n    function exitHandler(child: ChildProcessWithoutNullStreams) {\n      child.kill();\n    }\n\n    //do something when app is closing\n    process.on('exit', exitHandler.bind(null, child));\n\n    //catches ctrl+c event\n    process.on('SIGINT', () => process.exit());\n\n    // catches \"kill pid\" (for example: nodemon restart)\n    process.on('SIGUSR1', exitHandler.bind(null, child));\n    process.on('SIGUSR2', exitHandler.bind(null, child));\n\n    //catches uncaught exceptions\n    process.on('uncaughtException', exitHandler.bind(null, child));\n    child.on('close', (code: number) => resolve(code));\n  });\n};\n","import { join } from 'path';\nimport { nextOrDefault } from './args-extrators';\nexport interface StackScriptOptions {\n  cwd: string;\n  depends: string[];\n  signal: string;\n}\nexport interface StackScriptCommands {\n  [key: string]: string;\n}\nexport interface StackScript {\n  [key: string]: { commands: StackScriptCommands; options: StackScriptOptions };\n}\nexport interface Stack {\n  name: string;\n  options?: StackScriptOptions;\n  commands?: string[];\n}\nexport async function readConfig(): Promise<{\n  stacks: StackScript;\n}> {\n  console.log(nextOrDefault('-c', 'repo.json'))\n  return require(join(process.cwd(), nextOrDefault('-c', 'repo.json')));\n}\n","import { RunProcess } from '../helpers/run-process';\nimport { readConfig, Stack } from '../helpers/read-config';\n\nexport async function Run(stack: string) {\n  const config = await readConfig();\n  let stacks = Object.keys(config.stacks);\n\n  const StacksMappedOriginal = stacks.map(name => ({\n    name,\n    options: config.stacks[name].options,\n    commands: Object.keys(config.stacks[name].commands).map(\n      key => config.stacks[name].commands[key]\n    )\n  }));\n  let StacksMapped = [...StacksMappedOriginal];\n\n  if (stack && !stack.includes('-c')) {\n    StacksMapped = StacksMapped.filter(s => s.name === stack);\n  }\n\n  let priorityQueue = StacksMapped.filter(\n    s => s.options && s.options.depends\n  ) as Stack[];\n  const dependQueue: Stack[] = [];\n\n  priorityQueue.forEach(queue => {\n    for (const depend of queue.options.depends) {\n      const dependFound = StacksMappedOriginal.find(s => s.name === depend);\n      if (!dependFound) {\n        throw new Error(\n          `Missing depend ${depend} inside service ${JSON.stringify(\n            queue,\n            null,\n            2\n          )}`\n        );\n      }\n      if (!priorityQueue.find(queue => queue.name === dependFound.name)) {\n        dependQueue.push(dependFound);\n      }\n    }\n  });\n  const depends = [\n    ...new Set(\n      dependQueue\n        .map(item => item.name)\n        .map(name => StacksMappedOriginal.find(s => s.name === name))\n    )\n  ];\n\n  for (const depend of depends) {\n    await RunCommands(depend);\n  }\n  await Promise.all(priorityQueue.map(async queue => await RunCommands(queue)));\n  StacksMapped = StacksMapped.filter(s => {\n    if (priorityQueue.includes({ name: s.name })) {\n      return false;\n    }\n    if (\n      priorityQueue.filter(q => q.options.depends.find(d => d === s.name))\n        .length\n    ) {\n      return false;\n    }\n    if (priorityQueue.find(q => q.name === s.name)) {\n      return false;\n    }\n    return true;\n  });\n  await Promise.all(StacksMapped.map(stack => RunCommands(stack)));\n}\n\nasync function RunCommands(stack: Stack) {\n  if (!stack) {\n    throw new Error(`Missing stack ${JSON.stringify(stack)}`);\n  }\n  for (const cmd of stack.commands) {\n    await RunProcess(cmd, stack.options.cwd, stack.options.signal);\n  }\n}\n","import { spawn } from 'child_process';\n\nexport const NpmInstall = (cwd: string) => {\n  return new Promise(resolve => {\n    const child = spawn('npx', ['npm', 'install'], { cwd });\n    child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n    child.on('close', (code: number) => resolve(code));\n  });\n};\n","import { join } from 'path';\nimport { MAIN_FOLDER, CONFIG } from '../constants';\nimport { NpmInstall } from './npm-install';\nimport { promisify } from 'util';\nimport { readdir } from 'fs';\n\nexport async function installApps() {\n  const appsFolder = join(process.cwd(), MAIN_FOLDER, CONFIG.apps);\n  const folders = await promisify(readdir)(appsFolder);\n  console.log(`Executing 'npm install' on following @apps: '${folders}'`);\n  await Promise.all(\n    folders.map(folder => NpmInstall(join(appsFolder, folder)))\n  );\n}\n","import { installApps } from '../helpers/install-apps';\n\nexport async function Install() {\n   await installApps()\n}","import { Create } from './create';\nimport { CreateLib } from './create-lib';\nimport { CreateShared } from '../helpers/create-shared';\nimport { Compile } from './compile';\nimport { Run } from './run';\nimport { Install } from './install';\n\nexport const Tasks = new Map<string, Function>([\n  ['create', Create],\n  ['lib', CreateLib],\n  ['shared', CreateShared],\n  ['compile', Compile],\n  ['run', Run],\n  ['install', Install],\n]);\n","import { Tasks } from './tasks';\n\nasync function Main() {\n  let args = process.argv.slice(2);\n\n  if (!Tasks.has(args[0])) {\n    throw new Error(`Missing task ${args[0]}`);\n  }\n  try {\n    await Tasks.get(args[0])(args[1]);\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nMain();\n"]}