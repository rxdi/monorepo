{"version":3,"sources":["helpers/make-dir.ts","constants.ts","helpers/check-exist.ts","helpers/create-workspace.ts","tasks/create.ts","helpers/create-module.ts","helpers/create-lib.ts","tasks/create-lib.ts","helpers/create-shared.ts","helpers/read-dir.ts","helpers/transpile-typescript.ts","helpers/compile-workspace.ts","tasks/compile.ts","tasks/index.ts","main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"../src","sourcesContent":["import { promisify } from 'util';\nimport { mkdir } from 'fs';\n\nexport async function makeDir(path: string) {\n  return promisify(mkdir)(path);\n}\n","export const MAIN_FOLDER = 'src';\n\nexport const CONFIG = {\n  shared: '@shared',\n  lib: '@lib',\n  apps: '@apps'\n};\n","import { promisify } from 'util';\nimport { exists } from 'fs';\n\nexport async function checkExist(path: string) {\n  return promisify(exists)(path);\n}\n","import { makeDir } from './make-dir';\nimport { MAIN_FOLDER, CONFIG } from '../constants';\nimport { checkExist } from './check-exist';\nimport { join } from 'path';\n\nexport async function createWorkspace() {\n  try {\n    await makeDir(MAIN_FOLDER);\n  } catch (e) {}\n  for (const value of Object.values(CONFIG)) {\n    if (!(await checkExist(join(MAIN_FOLDER, value)))) {\n      try {\n        await makeDir(join(MAIN_FOLDER, value));\n      } catch (e) {}\n    }\n  }\n}\n","import { createWorkspace } from '../helpers/create-workspace';\n\nexport async function Create() {\n  await createWorkspace();\n}\n","import { join } from 'path';\nimport { MAIN_FOLDER, CONFIG } from '../constants';\nimport { makeDir } from './make-dir';\nimport { promisify } from 'util';\nimport { writeFile } from 'fs';\n\nexport async function createModule(name: string, type: 'shared' | 'lib') {\n  const sharedFolder = join(process.cwd(), MAIN_FOLDER, CONFIG[type], name);\n  console.log(sharedFolder);\n  try {\n    await makeDir(sharedFolder);\n  } catch (e) {}\n  await promisify(writeFile)(\n    join(sharedFolder, 'index.ts'),\n    `export function MyLibFunction() {\n    return {}\n  }`,\n    { encoding: 'utf-8' }\n  );\n  await promisify(writeFile)(\n    join(sharedFolder, 'tsconfig.json'),\n    JSON.stringify(\n      {\n        compilerOptions: {\n          declaration: true,\n          outDir: `../../../node_modules/${CONFIG[type]}/${name}`\n        }\n      },\n      null,\n      2\n    ),\n    { encoding: 'utf-8' }\n  );\n}\n","import { createModule } from './create-module';\n\nexport async function createLib(name: string) {\n  await createModule(name, 'lib');\n}\n","import { createLib } from '../helpers/create-lib';\n\nexport async function CreateLib(name: string) {\n  await createLib(name);\n}\n","import { createModule } from './create-module';\n\nexport async function createShared(name: string) {\n  await createModule(name, 'shared');\n}\n","import { promisify } from 'util';\nimport { execFile } from 'child_process';\n\nexport async function readDir(path: string) {\n  const { stdout } = await promisify(execFile)('find', [path]);\n  return stdout.split('\\n');\n}\n","import { spawn } from 'child_process';\n\nexport const TranspileTypescript = (cwd: string) => {\n  return new Promise(resolve => {\n    const child = spawn('npx', ['tsc'], { cwd });\n    child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n    child.on('close', (code: number) => resolve(code));\n  });\n};\n","import { join, normalize } from 'path';\nimport { readDir } from './read-dir';\nimport { MAIN_FOLDER, CONFIG } from '../constants';\nimport { TranspileTypescript } from './transpile-typescript';\n\nexport async function compileWorkspace() {\n  const file_list = [\n    ...(await readDir(join(process.cwd(), MAIN_FOLDER, CONFIG.shared))),\n    ...(await readDir(join(process.cwd(), MAIN_FOLDER, CONFIG.lib)))\n  ];\n  const tsFiles = file_list\n    .filter(f => f.includes('.ts'))\n    .map(f => f.replace(process.cwd(), ''));\n\n  await Promise.all(\n    tsFiles.map(async file => {\n      const dir = normalize(join(process.cwd(), file));\n      const cwd = dir.substring(0, dir.lastIndexOf('/'));\n      await TranspileTypescript(cwd);\n    })\n  );\n}\n","import { compileWorkspace } from '../helpers/compile-workspace';\n\nexport async function Compile() {\n  await compileWorkspace();\n}\n","import { Create } from './create';\nimport { CreateLib } from './create-lib';\nimport { createShared } from '../helpers/create-shared';\nimport { Compile } from './compile';\n\nexport const Tasks = new Map<string, Function>([\n  ['create', Create],\n  ['lib', CreateLib],\n  ['shared', createShared],\n  ['compile', Compile]\n]);\n","import { Tasks } from './tasks';\n\nasync function Main() {\n  let args = process.argv.slice(2);\n\n  if (!Tasks.has(args[0])) {\n    throw new Error(`Missing task ${args[0]}`);\n  }\n  try {\n    await Tasks.get(args[0])(args[1]);\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nMain();\n"]}